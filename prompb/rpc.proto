// Copyright 2017 Prometheus Team
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package prometheus;

import "types.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option go_package = "prompb";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

service Query {
  rpc Instant(QueryInstantRequest) returns (QueryResponse)  {
    option (google.api.http) = {
      get: "/v2/query"
    };
  }

  rpc Range(QueryRangeRequest) returns (QueryResponse) {
    option (google.api.http) = {
      get: "/v2/query_range"
    };
  }

  rpc Label(LabelRequest) returns (LabelResponse) {
    option (google.api.http) = {
      get: "/v2/label/{name}"
    };
  }

  // rpc Series(SeriesRequest) returns (SeriesResponse) {
  //   option (google.api.http) = {
  //     get: "/v2/series"
  //   };
  // }
}

message QueryInstantRequest {
  // Time range for which to return data.
  TimeRange range = 1;
  // PromQL formatted query expression.
  string expr     = 2;
}


message QueryRangeRequest {
  // Time range for which to return data.
  TimeRange range = 1;

  google.protobuf.Duration step = 2 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];

  google.protobuf.Duration timeout = 3 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];
  // PromQL formatted query expression.
  string expr     = 4;
}

message QueryResponse {
  repeated TimeSeries series = 1;
}

message RawQueryRequest {
  TimeRange range                = 1 [(gogoproto.nullable) = false];
  repeated LabelMatcher matchers = 2 [(gogoproto.nullable) = false];
}

message LabelRequest {
  string name = 1;
}

message LabelResponse {
  repeated string values = 1;
}

message SeriesRequest {
  TimeRange range                = 1;
  
  // Fully typed or string based selector of series.
  oneof selector_or_query {
    Selector selector = 2;
    string query      = 3;
  }
}

message SeriesInfo {
  Labels labels = 1 [(gogoproto.nullable) = false];
}

message SeriesResponse {
  repeated SeriesInfo series = 1;
}

// service Remote {
//   rpc Write(RemoteWriteRequest) returns (RemoteWriteResponse);
//   rpc Read(RemoteReadRequest) returns (RemoteReadResponse);
// }

message RemoteWriteRequest {
  repeated TimeSeries series = 1;
}

message RemoteWriteResponse {
}

service Admin {
  // Reload triggers a reload of block data.
  rpc TSDBReload(TSDBReloadRequest) returns (TSDBReloadResponse) {
    option (google.api.http) = {
      get: "/admin/v1/tsdb/reload"
    };
  }

  // Snapshot creates a snapshot of all current data into 'snapshots/<datetime>-<rand>' under
  // the TSDB's date directory.
  rpc TSDBSnapshot(TSDBSnapshotRequest) returns (TSDBSnapshotResponse) {
    option (google.api.http) = {
      get: "/admin/v1/tsdb/snapshot"
    };
  }

  // DeleteSeries deletes data for a selection of series in a time range.
  rpc DeleteSeries(SeriesDeleteRequest) returns (SeriesDeleteResponse) {
    option (google.api.http) = {
      delete: "/admin/v1/series"
    };
  }
}


message TSDBReloadRequest {
}

message TSDBReloadResponse {
}

message TSDBSnapshotRequest {
}

message TSDBSnapshotResponse {
  string name = 1;
}

message SeriesDeleteRequest {
  TimeRange range       = 1;

  oneof selector_or_query {
    Selector selector = 2;
    string query      = 3;
  }
}

message SeriesDeleteResponse {
  uint64 NumDeleted = 1;
}

service Status {
  rpc Targets(TargetsRequest) returns (TargetsResponse) {
    option (google.api.http) = {
      get: "/v2/status/targets"
    };
  }

  rpc Alertmanagers(AlertmanagersRequest) returns (AlertmanagersResponse) {
    option (google.api.http) = {
      get: "/v2/status/alertmanagers"
    };
  }

  rpc Health(HealthRequest) returns (HealthResponse) {
    option (google.api.http) = {
      get: "/v2/status/health"
    };
  }

  rpc Readiness(ReadinessRequest) returns (ReadinessResponse) {
    option (google.api.http) = {
      get: "/v2/status/ready"
    };
  }

  rpc Config(ConfigRequest) returns (ConfigResponse) {
    option (google.api.http) = {
      get: "/v2/status/config"
    };
  }
}

message TargetsRequest {
}


message TargetStatus {
  enum Health {
    UNKNOWN   = 0;
    HEALTHY   = 1;
    UNHEALTHY = 2;
  }
  Health health                         = 1;
  google.protobuf.Timestamp last_scrape = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  string last_error                     = 3;
}

message Target {
  string scrape_url        = 1;
  Labels labels            = 2 [(gogoproto.nullable) = false];
  Labels discovered_labels = 3 [(gogoproto.nullable) = false];
  TargetStatus status      = 4 [(gogoproto.nullable) = false];
}

message TargetsResponse {
  repeated Target targets = 1;
}

message AlertmanagersRequest {
}

message Alertmanager {
  string url = 1;
}

message AlertmanagersResponse {
  repeated Alertmanager alertmanagers = 1;
}

message HealthRequest {
}

message HealthResponse {
}

message ReadinessRequest {
}

message ReadinessResponse {
}

message ConfigRequest {
}

message ConfigResponse {
}