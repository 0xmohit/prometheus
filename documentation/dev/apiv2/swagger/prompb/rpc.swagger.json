{
  "swagger": "2.0",
  "info": {
    "title": "prompb/rpc.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/admin/v1/series": {
      "delete": {
        "summary": "DeleteSeries deletes data for a selection of series in a time range.",
        "operationId": "DeleteSeries",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/prometheusSeriesDeleteResponse"
            }
          }
        },
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/v1/tsdb/reload": {
      "get": {
        "summary": "Reload triggers a reload of block data.",
        "operationId": "TSDBReload",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/prometheusTSDBReloadResponse"
            }
          }
        },
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/v1/tsdb/snapshot": {
      "get": {
        "summary": "Snapshot creates a snapshot of all current data into 'snapshots/\u003cdatetime\u003e-\u003crand\u003e' under\nthe TSDB's date directory.",
        "operationId": "TSDBSnapshot",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/prometheusTSDBSnapshotResponse"
            }
          }
        },
        "tags": [
          "Admin"
        ]
      }
    },
    "/v2/label/{name}": {
      "get": {
        "operationId": "Label",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/prometheusLabelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/v2/query": {
      "get": {
        "operationId": "Instant",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/prometheusQueryResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "range.min_time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "range.max_time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "expr",
            "description": "PromQL formatted query expression.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/v2/query_range": {
      "get": {
        "operationId": "Range",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/prometheusQueryResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "range.min_time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "range.max_time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "step.seconds",
            "description": "Signed seconds of the span of time. Must be from -315,576,000,000\nto +315,576,000,000 inclusive.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "step.nanos",
            "description": "Signed fractions of a second at nanosecond resolution of the span\nof time. Durations less than one second are represented with a 0\n`seconds` field and a positive or negative `nanos` field. For durations\nof one second or more, a non-zero value for the `nanos` field must be\nof the same sign as the `seconds` field. Must be from -999,999,999\nto +999,999,999 inclusive.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "timeout.seconds",
            "description": "Signed seconds of the span of time. Must be from -315,576,000,000\nto +315,576,000,000 inclusive.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "timeout.nanos",
            "description": "Signed fractions of a second at nanosecond resolution of the span\nof time. Durations less than one second are represented with a 0\n`seconds` field and a positive or negative `nanos` field. For durations\nof one second or more, a non-zero value for the `nanos` field must be\nof the same sign as the `seconds` field. Must be from -999,999,999\nto +999,999,999 inclusive.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "expr",
            "description": "PromQL formatted query expression.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/v2/status/alertmanagers": {
      "get": {
        "operationId": "Alertmanagers",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/prometheusAlertmanagersResponse"
            }
          }
        },
        "tags": [
          "Status"
        ]
      }
    },
    "/v2/status/config": {
      "get": {
        "operationId": "Config",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/prometheusConfigResponse"
            }
          }
        },
        "tags": [
          "Status"
        ]
      }
    },
    "/v2/status/health": {
      "get": {
        "operationId": "Health",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/prometheusHealthResponse"
            }
          }
        },
        "tags": [
          "Status"
        ]
      }
    },
    "/v2/status/ready": {
      "get": {
        "operationId": "Readiness",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/prometheusReadinessResponse"
            }
          }
        },
        "tags": [
          "Status"
        ]
      }
    },
    "/v2/status/targets": {
      "get": {
        "operationId": "Targets",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/prometheusTargetsResponse"
            }
          }
        },
        "tags": [
          "Status"
        ]
      }
    }
  },
  "definitions": {
    "TargetStatusHealth": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "HEALTHY",
        "UNHEALTHY"
      ],
      "default": "UNKNOWN"
    },
    "prometheusAlertmanager": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "prometheusAlertmanagersRequest": {
      "type": "object"
    },
    "prometheusAlertmanagersResponse": {
      "type": "object",
      "properties": {
        "alertmanagers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/prometheusAlertmanager"
          }
        }
      }
    },
    "prometheusConfigRequest": {
      "type": "object"
    },
    "prometheusConfigResponse": {
      "type": "object"
    },
    "prometheusHealthRequest": {
      "type": "object"
    },
    "prometheusHealthResponse": {
      "type": "object"
    },
    "prometheusLabel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "prometheusLabelMatcher": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/prometheusLabelMatcherType"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "description": "Matcher specifies a rule, which can match or set of labels or not."
    },
    "prometheusLabelMatcherType": {
      "type": "string",
      "enum": [
        "EQ",
        "NEQ",
        "RE",
        "NRE"
      ],
      "default": "EQ"
    },
    "prometheusLabelRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "prometheusLabelResponse": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "prometheusLabels": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/prometheusLabel"
          }
        }
      }
    },
    "prometheusQueryInstantRequest": {
      "type": "object",
      "properties": {
        "range": {
          "$ref": "#/definitions/prometheusTimeRange",
          "description": "Time range for which to return data."
        },
        "expr": {
          "type": "string",
          "description": "PromQL formatted query expression."
        }
      }
    },
    "prometheusQueryRangeRequest": {
      "type": "object",
      "properties": {
        "range": {
          "$ref": "#/definitions/prometheusTimeRange",
          "description": "Time range for which to return data."
        },
        "step": {
          "$ref": "#/definitions/protobufDuration"
        },
        "timeout": {
          "$ref": "#/definitions/protobufDuration"
        },
        "expr": {
          "type": "string",
          "description": "PromQL formatted query expression."
        }
      }
    },
    "prometheusQueryResponse": {
      "type": "object",
      "properties": {
        "series": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/prometheusTimeSeries"
          }
        }
      }
    },
    "prometheusReadinessRequest": {
      "type": "object"
    },
    "prometheusReadinessResponse": {
      "type": "object"
    },
    "prometheusSample": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "timestamp_ms": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "prometheusSelector": {
      "type": "object",
      "properties": {
        "matchers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/prometheusLabelMatcher"
          }
        }
      }
    },
    "prometheusSeriesDeleteRequest": {
      "type": "object",
      "properties": {
        "range": {
          "$ref": "#/definitions/prometheusTimeRange"
        },
        "selector": {
          "$ref": "#/definitions/prometheusSelector"
        },
        "query": {
          "type": "string"
        }
      }
    },
    "prometheusSeriesDeleteResponse": {
      "type": "object",
      "properties": {
        "NumDeleted": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "prometheusTSDBReloadRequest": {
      "type": "object"
    },
    "prometheusTSDBReloadResponse": {
      "type": "object"
    },
    "prometheusTSDBSnapshotRequest": {
      "type": "object"
    },
    "prometheusTSDBSnapshotResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "prometheusTarget": {
      "type": "object",
      "properties": {
        "scrape_url": {
          "type": "string"
        },
        "labels": {
          "$ref": "#/definitions/prometheusLabels"
        },
        "discovered_labels": {
          "$ref": "#/definitions/prometheusLabels"
        },
        "status": {
          "$ref": "#/definitions/prometheusTargetStatus"
        }
      }
    },
    "prometheusTargetStatus": {
      "type": "object",
      "properties": {
        "health": {
          "$ref": "#/definitions/TargetStatusHealth"
        },
        "last_scrape": {
          "type": "string",
          "format": "date-time"
        },
        "last_error": {
          "type": "string"
        }
      }
    },
    "prometheusTargetsRequest": {
      "type": "object"
    },
    "prometheusTargetsResponse": {
      "type": "object",
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/prometheusTarget"
          }
        }
      }
    },
    "prometheusTimeRange": {
      "type": "object",
      "properties": {
        "min_time": {
          "type": "string",
          "format": "date-time"
        },
        "max_time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "prometheusTimeSeries": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/prometheusLabel"
          }
        },
        "samples": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/prometheusSample"
          }
        }
      }
    },
    "protobufDuration": {
      "type": "object",
      "properties": {
        "seconds": {
          "type": "string",
          "format": "int64",
          "description": "Signed seconds of the span of time. Must be from -315,576,000,000\nto +315,576,000,000 inclusive."
        },
        "nanos": {
          "type": "integer",
          "format": "int32",
          "description": "Signed fractions of a second at nanosecond resolution of the span\nof time. Durations less than one second are represented with a 0\n`seconds` field and a positive or negative `nanos` field. For durations\nof one second or more, a non-zero value for the `nanos` field must be\nof the same sign as the `seconds` field. Must be from -999,999,999\nto +999,999,999 inclusive."
        }
      },
      "description": "A Duration represents a signed, fixed-length span of time represented\nas a count of seconds and fractions of seconds at nanosecond\nresolution. It is independent of any calendar and concepts like \"day\"\nor \"month\". It is related to Timestamp in that the difference between\ntwo Timestamp values is a Duration and it can be added or subtracted\nfrom a Timestamp. Range is approximately +-10,000 years.\n\nExample 1: Compute Duration from two Timestamps in pseudo code.\n\n    Timestamp start = ...;\n    Timestamp end = ...;\n    Duration duration = ...;\n\n    duration.seconds = end.seconds - start.seconds;\n    duration.nanos = end.nanos - start.nanos;\n\n    if (duration.seconds \u003c 0 \u0026\u0026 duration.nanos \u003e 0) {\n      duration.seconds += 1;\n      duration.nanos -= 1000000000;\n    } else if (durations.seconds \u003e 0 \u0026\u0026 duration.nanos \u003c 0) {\n      duration.seconds -= 1;\n      duration.nanos += 1000000000;\n    }\n\nExample 2: Compute Timestamp from Timestamp + Duration in pseudo code.\n\n    Timestamp start = ...;\n    Duration duration = ...;\n    Timestamp end = ...;\n\n    end.seconds = start.seconds + duration.seconds;\n    end.nanos = start.nanos + duration.nanos;\n\n    if (end.nanos \u003c 0) {\n      end.seconds -= 1;\n      end.nanos += 1000000000;\n    } else if (end.nanos \u003e= 1000000000) {\n      end.seconds += 1;\n      end.nanos -= 1000000000;\n    }\n\nExample 3: Compute Duration from datetime.timedelta in Python.\n\n    td = datetime.timedelta(days=3, minutes=10)\n    duration = Duration()\n    duration.FromTimedelta(td)"
    }
  }
}
